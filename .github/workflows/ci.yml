name: CI/CD Pipeline - Ojyx

on:
  push:
    branches: [ main, develop, feat/*, fix/*, chore/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.32.6'
  JAVA_VERSION: '17'

jobs:
  # Job de validation de base
  validate:
    name: Validate Environment
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.tool_cache }}/flutter
          ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: Get dependencies
      run: flutter pub get

    - name: Generate code
      run: flutter packages pub run build_runner build --delete-conflicting-outputs

    - name: Verify installation
      run: |
        flutter doctor -v
        flutter --version

  # Job d'analyse statique et formatting
  analyze:
    name: Static Analysis & Formatting
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.tool_cache }}/flutter
          ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: Get dependencies
      run: flutter pub get

    - name: Generate code
      run: flutter packages pub run build_runner build --delete-conflicting-outputs

    - name: Check formatting
      run: dart format --set-exit-if-changed .

    - name: Analyze code
      run: flutter analyze --no-fatal-infos

  # Job de tests avec TDD strict
  test:
    name: TDD Tests & Coverage
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.tool_cache }}/flutter
          ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: Get dependencies
      run: flutter pub get

    - name: Generate code
      run: flutter packages pub run build_runner build --delete-conflicting-outputs

    - name: Run tests with coverage
      run: |
        flutter test --coverage --reporter=expanded
        # TDD: TOUS les tests doivent passer
        if [ $? -ne 0 ]; then
          echo "::error::Des tests échouent! Le TDD exige que 100% des tests passent."
          exit 1
        fi

    - name: Install lcov
      run: sudo apt-get update && sudo apt-get install -y lcov

    - name: Check test coverage
      run: |
        total_lines=$(lcov --summary coverage/lcov.info 2>/dev/null | grep "lines" | grep -o '[0-9.]\+%' | head -1 | sed 's/%//')
        if [ -z "$total_lines" ]; then
          echo "No coverage data found. This might be normal if no tests exist yet."
          exit 0
        fi
        echo "Current test coverage: $total_lines%"
        if (( $(echo "$total_lines < 80" | bc -l) )); then
          echo "::error::Test coverage is below 80%. Current: $total_lines%"
          echo "Le TDD exige un minimum de 80% de couverture."
          echo "Ajoutez des tests pour les parties non couvertes."
          exit 1
        fi

    - name: Generate coverage report
      run: genhtml coverage/lcov.info -o coverage/html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: coverage/lcov.info
        flags: unittests
        name: codecov-ojyx
        fail_ci_if_error: false

    - name: Archive coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  # Job de validation TDD finale
  tdd-validation:
    name: TDD Compliance Validation
    runs-on: ubuntu-latest
    needs: [analyze, test]
    
    steps:
    - name: Validate TDD Compliance
      run: |
        echo "## ✅ TDD Validation Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Tests unitaires: 100% passés" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage minimum: ≥80% respectée" >> $GITHUB_STEP_SUMMARY
        echo "- Analyse statique: Aucune erreur critique" >> $GITHUB_STEP_SUMMARY
        echo "- Formatage: Code correctement formaté" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Le code respecte les standards TDD du projet Ojyx." >> $GITHUB_STEP_SUMMARY

  # Job de build Android
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: [analyze, test, tdd-validation]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.tool_cache }}/flutter
          ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Get dependencies
      run: flutter pub get

    - name: Generate code
      run: flutter packages pub run build_runner build --delete-conflicting-outputs

    - name: Build debug APK
      run: flutter build apk --debug --verbose

    - name: Build release APK (if main branch)
      if: github.ref == 'refs/heads/main'
      run: flutter build apk --release --verbose

    - name: Upload debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk-${{ github.sha }}
        path: build/app/outputs/flutter-apk/app-debug.apk
        retention-days: 14

    - name: Upload release APK (if main branch)
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-${{ github.sha }}
        path: build/app/outputs/flutter-apk/app-release.apk
        retention-days: 30

    - name: Analyze APK size
      run: |
        echo "## 📱 APK Size Analysis" >> $GITHUB_STEP_SUMMARY
        if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
          DEBUG_SIZE=$(stat -c%s build/app/outputs/flutter-apk/app-debug.apk)
          DEBUG_MB=$((DEBUG_SIZE / 1024 / 1024))
          echo "- Debug APK: ${DEBUG_MB} MB" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
          RELEASE_SIZE=$(stat -c%s build/app/outputs/flutter-apk/app-release.apk)
          RELEASE_MB=$((RELEASE_SIZE / 1024 / 1024))
          echo "- Release APK: ${RELEASE_MB} MB" >> $GITHUB_STEP_SUMMARY
        fi

  # Job de notification du statut final
  notify-status:
    name: Build Status Notification
    runs-on: ubuntu-latest
    needs: [analyze, test, tdd-validation, build-android]
    if: always()
    
    steps:
    - name: Check overall status
      run: |
        if [[ "${{ needs.analyze.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.tdd-validation.result }}" == "success" && ("${{ needs.build-android.result }}" == "success" || "${{ needs.build-android.result }}" == "skipped") ]]; then
          echo "## 🎉 Build Successful!" >> $GITHUB_STEP_SUMMARY
          echo "All CI/CD pipeline jobs completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Static Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TDD Tests & Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TDD Compliance" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Android Build" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Build Failed!" >> $GITHUB_STEP_SUMMARY
          echo "Some CI/CD pipeline jobs failed:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Analyze: ${{ needs.analyze.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- TDD Validation: ${{ needs.tdd-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Android: ${{ needs.build-android.result }}" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
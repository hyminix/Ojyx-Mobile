# **PRD Ojyx : Audit Technique et Modernisation Stratégique**

## **Overview**

Ce document fait suite au PRD de "Mise à Niveau Technique" et définit la prochaine phase de travail sur le projet Ojyx. Les objectifs sont triples :

1. **Analyser et forcer la mise à jour majeure** des dépendances pour résoudre le retard de version identifié.  
2. **Créer un script de compilation autonome** pour l'environnement WSL, permettant une validation automatisée (notamment par une IA).  
3. **Réaliser un audit complet de la suite de tests** pour garantir sa pertinence, sa conformité et son efficacité.

L'ensemble de ce processus reste rigoureusement piloté par la méthodologie **TDD (Test-Driven Development)**, détaillée en annexe, qui est notre garde-fou contre les régressions.

## **Core Tasks (Objectifs Principaux)**

### **1\. Analyse, Mise à Jour Majeure et Adaptation du Code**

* **Problématique** : La commande flutter pub get ou upgrade ne met pas à jour vers les dernières versions majeures (ex: freezed 2.5.8 vers 3.2.0). Ceci est dû au versionnement sémantique (^), qui empêche les "breaking changes" automatiques.  
* **Objectif** : Forcer la mise à jour de **toutes les dépendances nécessaires** vers leurs dernières versions majeures disponibles. Cela implique de comprendre les changements introduits et d'**adapter l'intégralité du code de l'application** pour assurer une compatibilité totale.  
* **Importance** : Résorber la dette technique, bénéficier des dernières optimisations et fonctionnalités, et assurer la pérennité de la stack technique.  
* **Implémentation** :  
  1. **Analyse et Documentation** : Pour chaque dépendance majeure à mettre à jour, consulter sa documentation officielle (en utilisant les ressources disponibles comme "MCP context7") pour identifier précisément tous les "breaking changes" et les nouvelles API.  
  2. **Mise à Jour Forcée** : Utiliser la commande flutter pub upgrade \--major-versions pour passer aux dernières versions.  
  3. **Adaptation Complète du Code (TDD)** :  
     * Lancer la suite de tests (flutter test) pour identifier toutes les erreurs de compilation et les tests échouants.  
     * Modifier le code de l'application (pas seulement les tests) pour le rendre compatible avec les nouvelles versions, en se basant sur la documentation analysée.  
     * Corriger chaque problème en suivant rigoureusement le cycle **Red-Green-Refactor**.

### **2\. Script de Compilation Autonome pour WSL**

* **Objectif** : Créer un script shell (.sh) unique et robuste qui compile l'application pour Android au sein d'un environnement WSL (Windows Subsystem for Linux). Ce script doit être exécutable sans intervention manuelle.  
* **Importance** : Permettre à n'importe quel développeur (ou à une IA) de valider la compilation de manière fiable et reproductible. C'est une étape clé vers l'automatisation complète et le CI/CD.  
* **Implémentation** :  
  1. **Définition** : Lister les prérequis (version de Flutter, SDK Android, etc.) et les variables d'environnement nécessaires.  
  2. **Scripting** : Écrire un script qui exécute séquentiellement :  
     * flutter clean  
     * flutter pub get  
     * flutter build apk \--debug (ou appbundle)  
  3. **Robustesse** : Ajouter une gestion d'erreurs (le script doit s'arrêter et retourner un code d'erreur si une étape échoue) et des logs clairs.  
  4. **Validation** : Tester le script dans un environnement WSL propre pour confirmer son autonomie.

### **3\. Audit et Refonte de la Suite de Tests**

* **Problématique** : La suite de tests existante, bien que fournie, peut contenir des tests obsolètes, non conformes aux nouvelles TDD\_guidelines, ou redondants.  
* **Objectif** : Purger, mettre à jour et optimiser l'ensemble de la suite de tests pour qu'elle soit fiable, pertinente et qu'elle passe à 100%.  
* **Importance** : Une suite de tests saine est le fondement de la qualité et de la vélocité du développement. Elle doit inspirer confiance et non être une source de friction.  
* **Implémentation** :  
  1. **Purge** : Parcourir tous les tests et supprimer ceux qui sont inutiles (testent des détails d'implémentation, sont triviaux, ou dupliqués).  
  2. **Mise en Conformité** : Réviser chaque test restant et s'assurer qu'il respecte le **Guide des Bonnes Pratiques TDD (Annexe B)** : nomenclature, structure AAA, usage des builders, etc.  
  3. **Mise à Jour** : Adapter les tests aux nouvelles versions des dépendances (suite à la Tâche 1).  
  4. **Validation** : Exécuter la suite de tests complète et corriger toutes les erreurs jusqu'à atteindre l'objectif **"0 erreur"**.

## **Development Roadmap**

### **Phase 1: Mise à Jour Majeure & Stabilisation Initiale**

* **1.1** : Forcer la mise à jour majeure des dépendances.  
* **1.2** : Corriger les erreurs de compilation critiques pour que le projet soit analysable.  
* **1.3** : Lancer la suite de tests et obtenir une première lecture des régressions (Étape **Red** à grande échelle).

### **Phase 2: Audit et Réparation des Tests (TDD-Driven)**

* **2.1** : Commencer l'audit : purger et marquer les tests à refactoriser.  
* **2.2** : Appliquer le cycle **Red-Green-Refactor** sur les tests échouants, en les mettant en conformité avec les guidelines au fur et à mesure.  
* **2.3** : S'assurer que la couverture de test reste pertinente et que la suite de tests passe à 100%.

### **Phase 3: Automatisation de la Compilation**

* **3.1** : Développer et tester le script de compilation autonome pour WSL.  
* **3.2** : Intégrer potentiellement ce script dans la CI (GitHub Actions) pour valider la compilation sur un runner Linux.

## **Logical Dependency Chain**

1. **Mise à Jour Majeure (Phase 1\)** : C'est le prérequis absolu. Il est inutile d'auditer des tests basés sur des dépendances obsolètes.  
2. **Audit des Tests (Phase 2\)** : Dépend directement de la Phase 1, car la mise à jour va casser de nombreux tests qui devront être audités et corrigés.  
3. **Script de Compilation (Phase 3\)** : Doit être fait en dernier. Le script n'a de valeur que s'il compile un projet stable avec une suite de tests fiable.

## **Risks and Mitigations**

* **Risque** : La montée de version majeure introduit des changements si profonds qu'elle rend la base de code quasi irrécupérable.  
  * **Mitigation** : Procéder sur une branche dédiée. S'appuyer sur des commits atomiques pour chaque correction. Si une dépendance est trop problématique, envisager de la maintenir à une version inférieure temporairement.  
* **Risque** : L'audit des tests devient un "tunnel" sans fin et subjectif.  
  * **Mitigation** : Se baser strictement sur les **TDD Guidelines** comme critère objectif. Timeboxer l'effort de purge et se concentrer sur la correction des tests existants avant d'en créer de nouveaux.  
* **Risque** : L'environnement WSL local diffère de celui de la CI ou d'autres développeurs, rendant le script peu fiable.  
  * **Mitigation** : Documenter précisément les prérequis du script (ex: flutter version, java version). Utiliser des chemins relatifs ou des variables d'environnement pour éviter les chemins absolus.

## **Annexes**

*(Les annexes A et B du précédent PRD restent valides et sont applicables ici)*

### **Annexe A : Commandes et Règles Générales**

### **Annexe B : Guide des Bonnes Pratiques TDD \- Projet Ojyx**
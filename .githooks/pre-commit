#!/bin/bash

# Pre-commit hook pour Ojyx - Enforcement TDD
# Ce script vérifie le respect des règles TDD avant chaque commit

echo "🔍 Vérification du respect des règles TDD..."

# Couleurs pour l'output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteur d'erreurs
ERRORS=0

# 1. Vérifier les tests commentés
echo -n "Recherche de tests commentés... "
COMMENTED_TESTS=$(grep -rn "//.*test\(\|/\*.*test\|skip:\s*true\|\.skip(\|xit(\|xtest(\|pending(" --include="*.dart" lib/ test/ 2>/dev/null || true)

if [ ! -z "$COMMENTED_TESTS" ]; then
    echo -e "${RED}❌${NC}"
    echo -e "${RED}Tests commentés détectés:${NC}"
    echo "$COMMENTED_TESTS"
    ((ERRORS++))
else
    echo -e "${GREEN}✅${NC}"
fi

# 2. Vérifier les fichiers test_summary
echo -n "Recherche de fichiers test_summary interdits... "
SUMMARY_FILES=$(find . -type f \( -name "*test*summary*" -o -name "*TEST*SUMMARY*" \) -not -path "./.git/*" 2>/dev/null || true)

if [ ! -z "$SUMMARY_FILES" ]; then
    echo -e "${RED}❌${NC}"
    echo -e "${RED}Fichiers test_summary détectés:${NC}"
    echo "$SUMMARY_FILES"
    ((ERRORS++))
else
    echo -e "${GREEN}✅${NC}"
fi

# 3. Vérifier que chaque fichier .dart a un test correspondant
echo -n "Vérification de la présence de tests pour tous les fichiers... "
MISSING_TESTS=""

for file in $(find lib/ -name "*.dart" -not -path "*/generated/*" -not -path "*/*.g.dart" -not -path "*/*.freezed.dart" -not -name "main.dart" 2>/dev/null || true); do
    TEST_FILE=$(echo "$file" | sed 's|^lib/|test/|' | sed 's|\.dart$|_test.dart|')
    ALT_TEST_FILE=$(echo "$file" | sed 's|^lib/|test/|')
    
    if [ ! -f "$TEST_FILE" ] && [ ! -f "$ALT_TEST_FILE" ]; then
        MISSING_TESTS="${MISSING_TESTS}\n  - $file"
    fi
done

if [ ! -z "$MISSING_TESTS" ]; then
    echo -e "${RED}❌${NC}"
    echo -e "${RED}Fichiers sans tests:${NC}"
    echo -e "$MISSING_TESTS"
    ((ERRORS++))
else
    echo -e "${GREEN}✅${NC}"
fi

# 4. Vérifier que les fichiers de test contiennent des tests réels
echo -n "Validation du contenu des fichiers de test... "
EMPTY_TESTS=""

for test_file in $(find test/ -name "*_test.dart" 2>/dev/null || true); do
    if ! grep -q -E "(test\(|testWidgets\(|group\()" "$test_file"; then
        EMPTY_TESTS="${EMPTY_TESTS}\n  - $test_file"
    fi
done

if [ ! -z "$EMPTY_TESTS" ]; then
    echo -e "${RED}❌${NC}"
    echo -e "${RED}Fichiers de test vides ou invalides:${NC}"
    echo -e "$EMPTY_TESTS"
    ((ERRORS++))
else
    echo -e "${GREEN}✅${NC}"
fi

# 5. Vérifier la présence de patterns TODO/FIXME dans les tests
echo -n "Recherche de tests incomplets (TODO/FIXME)... "
INCOMPLETE_TESTS=$(grep -rn "TODO.*test\|FIXME.*test\|skip(\|skipTest" --include="*_test.dart" test/ 2>/dev/null || true)

if [ ! -z "$INCOMPLETE_TESTS" ]; then
    echo -e "${YELLOW}⚠️${NC}"
    echo -e "${YELLOW}Tests incomplets détectés (warning):${NC}"
    echo "$INCOMPLETE_TESTS"
fi

# 6. Exécuter les tests Flutter
echo "Exécution des tests Flutter..."
if ! flutter test --reporter=compact; then
    echo -e "${RED}❌ Des tests échouent!${NC}"
    ((ERRORS++))
else
    echo -e "${GREEN}✅ Tous les tests passent${NC}"
fi

# 7. Vérifier la couverture de code
echo -n "Vérification de la couverture de code... "
flutter test --coverage > /dev/null 2>&1
if [ -f "coverage/lcov.info" ]; then
    COVERAGE=$(lcov --summary coverage/lcov.info 2>/dev/null | grep "lines" | grep -o '[0-9.]\+%' | head -1 | sed 's/%//')
    if [ ! -z "$COVERAGE" ]; then
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo -e "${RED}❌${NC}"
            echo -e "${RED}Couverture insuffisante: ${COVERAGE}% (minimum requis: 80%)${NC}"
            ((ERRORS++))
        else
            echo -e "${GREEN}✅ ${COVERAGE}%${NC}"
        fi
    fi
fi

# Résultat final
echo ""
if [ $ERRORS -gt 0 ]; then
    echo -e "${RED}═══════════════════════════════════════════════════${NC}"
    echo -e "${RED}❌ COMMIT REFUSÉ: $ERRORS violation(s) TDD détectée(s)${NC}"
    echo -e "${RED}═══════════════════════════════════════════════════${NC}"
    echo ""
    echo "📖 Consultez CLAUDE.md pour les règles TDD complètes."
    echo "💡 Rappel: Écrivez TOUJOURS les tests AVANT le code!"
    echo ""
    exit 1
else
    echo -e "${GREEN}═══════════════════════════════════════════════════${NC}"
    echo -e "${GREEN}✅ Toutes les vérifications TDD passent!${NC}"
    echo -e "${GREEN}═══════════════════════════════════════════════════${NC}"
    echo ""
fi

exit 0
{
  "project": "Ojyx",
  "version": "1.0.0",
  "description": "R√®gles strictes pour Claude Code - D√©veloppement TDD obligatoire",
  
  "critical_rules": {
    "tdd_mandatory": {
      "enabled": true,
      "priority": "CRITICAL",
      "description": "Test-Driven Development est OBLIGATOIRE et NON-N√âGOCIABLE",
      "rules": [
        "TOUJOURS √©crire les tests AVANT le code de production",
        "JAMAIS commenter ou d√©sactiver des tests",
        "JAMAIS cr√©er de fichiers test_summary",
        "100% des tests doivent passer avant de continuer",
        "Coverage minimum de 80% obligatoire"
      ]
    }
  },
  
  "workflow_enforcement": {
    "before_writing_code": [
      "V√©rifier si un test existe d√©j√† pour cette fonctionnalit√©",
      "Cr√©er le fichier de test avec le suffixe _test.dart",
      "√âcrire des tests qui √©chouent (RED phase)",
      "Valider que les tests √©chouent pour la bonne raison"
    ],
    
    "while_writing_code": [
      "Impl√©menter le MINIMUM de code pour faire passer les tests",
      "Ne pas ajouter de fonctionnalit√©s non test√©es",
      "Ex√©cuter les tests apr√®s chaque modification",
      "Si un test √©choue, corriger imm√©diatement"
    ],
    
    "after_writing_code": [
      "V√©rifier que TOUS les tests passent",
      "V√©rifier la couverture de code (minimum 80%)",
      "Refactorer si n√©cessaire en gardant les tests verts",
      "Ex√©cuter 'flutter analyze' et corriger les warnings"
    ]
  },
  
  "prohibited_patterns": {
    "commented_tests": [
      "//.*test\\(",
      "/\\*.*test",
      "skip:\\s*true",
      "\\.skip\\(",
      "xit\\(",
      "xtest\\(",
      "pending\\("
    ],
    
    "forbidden_files": [
      "*test_summary*",
      "*tests_summary*",
      "*TEST_SUMMARY*"
    ],
    
    "bad_practices": [
      "TODO.*test",
      "FIXME.*test",
      "HACK.*test",
      "ignore:.*test"
    ]
  },
  
  "automated_checks": {
    "pre_commit": {
      "enabled": true,
      "script": ".githooks/pre-commit",
      "actions": [
        "V√©rifier les tests comment√©s",
        "V√©rifier la pr√©sence de tests pour chaque fichier",
        "Ex√©cuter tous les tests",
        "V√©rifier la couverture minimale"
      ]
    },
    
    "ci_cd": {
      "enabled": true,
      "workflows": [
        "tdd-enforcement.yml",
        "ci.yml"
      ],
      "auto_close_pr_on_violation": true
    }
  },
  
  "reminders": {
    "on_new_file": "üìù Rappel: Cr√©ez d'abord le fichier de test avant d'impl√©menter cette fonctionnalit√©!",
    "on_test_failure": "‚ùå Un test √©choue! Corrigez-le imm√©diatement avant de continuer.",
    "on_low_coverage": "üìä Coverage insuffisante! Ajoutez des tests pour atteindre 80% minimum.",
    "on_commented_test": "üö´ INTERDIT: Ne commentez JAMAIS les tests! Corrigez-les ou supprimez-les.",
    "on_test_summary": "üö´ INTERDIT: Les fichiers test_summary ne sont pas de vrais tests!"
  },
  
  "ai_behavior_rules": {
    "priority_order": [
      "1. Respect du TDD avant tout",
      "2. Qualit√© du code",
      "3. Performance",
      "4. Fonctionnalit√©s"
    ],
    
    "when_blocked": {
      "by_failing_test": "Corriger le test ou l'impl√©mentation, JAMAIS commenter le test",
      "by_coverage": "Ajouter plus de tests, pas r√©duire le seuil",
      "by_complexity": "Refactorer en gardant les tests verts",
      "by_time": "Mieux vaut un code de qualit√© en retard qu'un code sans tests"
    }
  },
  
  "reporting": {
    "tdd_violations": {
      "log_location": ".claude-code-violations.log",
      "track_patterns": true,
      "alert_on_repeated_violations": true
    }
  },
  
  "final_reminder": "Le TDD n'est pas une option, c'est LA m√©thode de d√©veloppement de ce projet. Toute d√©viation sera automatiquement d√©tect√©e et bloqu√©e."
}
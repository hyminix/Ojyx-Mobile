# Plan de Développement Ojyx - PRD de Finalisation

## Overview
Ojyx est un jeu de cartes multijoueur stratégique pour Android actuellement en phase de finalisation. Le projet a déjà implémenté toutes les fonctionnalités core (phases 1-5.4 complétées avec 1000+ tests) mais nécessite des corrections critiques d'architecture avant la mise en production. L'objectif est de stabiliser le projet en corrigeant les problèmes identifiés dans l'audit, puis de finaliser le MVP pour un déploiement sur Play Store.

## Core Features (État Actuel)

### ✅ Fonctionnalités Implémentées
- **Gameplay complet** : Distribution, pioche/défausse, détection fin de manche, calcul scores
- **Multijoueur temps réel** : Infrastructure Supabase avec WebSocket
- **Interface de jeu** : Grille personnelle, vue spectateur, zones communes
- **Système cartes actions** : 10 cartes implémentées (demi-tour, téléportation, peek, swap, etc.)
- **Architecture serveur-autoritaire** : 15+ fonctions PostgreSQL, validation côté serveur
- **Base de données complète** : 11 tables avec RLS, système anti-triche
- **Tests exhaustifs** : 1000+ tests incluant charge serveur, résilience réseau

### ❌ Problèmes Critiques à Résoudre
- **Architecture incohérente** : Duplication d'entités, violations Clean Architecture
- **Build cassé** : Erreurs build_runner résolues mais ~100-200 tests échouent encore
- **Integration gaps** : GameState mapping incomplet, action cards partiellement migrées
- **Tests UI désactivés** : 3 fichiers .disabled suite à migration Riverpod

## User Experience

### État Actuel UX
- Interface mobile-first fonctionnelle mais non polie
- Système de sélection et feedback implémenté
- Navigation go_router configurée
- Écrans principaux créés (Home, Lobby, Game, EndGame)

### Améliorations Nécessaires
- Animations et transitions fluides
- Feedback haptique et sonore
- Optimisation performances rendering
- Mode hors-ligne avec sync différée

## Technical Architecture

### Architecture Existante
- **Stack** : Flutter 3.x, Riverpod 2.x, Freezed, go_router, Supabase
- **Clean Architecture** : Structure features/domain/data/presentation (partiellement respectée)
- **Database** : PostgreSQL avec 11 tables, fonctions serveur, RLS complet
- **CI/CD** : GitHub Actions configuré avec TDD enforcement strict

### Problèmes Architecturaux Identifiés
- Entités Player dupliquées (game vs multiplayer)
- GameState/GameStateModel mapping incomplet
- Providers Riverpod mal configurés
- DbPlayerGrid dans domain layer (violation)
- ActionCards encore partiellement en mémoire locale

## Development Roadmap

### Phase 0: Stabilisation Architecture (PRIORITÉ ABSOLUE)
#### 0.1 Correction Entités Domain
- Unifier Player en GamePlayer et LobbyPlayer distincts
- Retirer toute sérialisation JSON des entités domain
- Déplacer DbPlayerGrid vers data layer
- Créer mappers complets GameState↔GameStateModel

#### 0.2 Refactoring Providers & DI
- Créer gameStateRepositoryProvider manquant
- Corriger injection dans tous les use cases
- Éliminer accès direct aux datasources depuis presentation
- Valider pattern d'injection Riverpod 2.x

#### 0.3 Migration Base de Données Complète
- Finaliser migration ActionCards vers Supabase
- Implémenter SupabaseActionCardDataSource/Repository
- Compléter fonctions PostgreSQL pour état complet
- Tests d'intégration end-to-end

### Phase 1: Réparation Suite de Tests
#### 1.1 Correction Tests Échouants (~100-200 tests)
- Adapter tests aux nouvelles structures GamePlayer/LobbyPlayer
- Corriger mappers fromJson/toJson dans modèles
- Mettre à jour fixtures et mocks
- Vérifier injection dépendances dans tests

#### 1.2 Réactivation Tests UI
- Renommer fichiers .disabled → .dart
- Migration syntaxe Riverpod 2.x
- Adapter aux nouveaux providers
- Valider rendering widgets

#### 1.3 Validation Couverture
- Atteindre 80% minimum (obligatoire)
- Ajouter tests manquants identifiés
- Documentation tests complexes

### Phase 2: Polish & Production
#### 2.1 Animations et UX
- Transitions entre écrans
- Animations cartes (reveal, swap, discard)
- Feedback visuel actions
- Sons et vibrations
- Optimisation performances

#### 2.2 Mode Hors-Ligne
- Cache local état de jeu
- Queue actions pendant déconnexion
- Synchronisation au retour réseau
- Gestion conflits

#### 2.3 Préparation Production
- Configuration variables environnement
- Build optimisé release
- Assets et icônes finaux
- Screenshots Play Store
- Privacy policy et terms

### Phase 3: Déploiement
#### 3.1 CI/CD Production
- Pipeline déploiement automatique
- Versioning sémantique
- Release notes automatiques
- Upload Play Store

#### 3.2 Monitoring Production
- Configuration Sentry complète
- Dashboards métriques
- Alertes critiques
- Analytics utilisateurs

## Logical Dependency Chain

1. **Stabilisation** (Phase 0) → Architecture propre, build fonctionnel
2. **Tests verts** (Phase 1) → Suite de tests 100% passants, couverture 80%+
3. **Polish** (Phase 2) → UX fluide, mode offline, production-ready
4. **Déploiement** (Phase 3) → Release Play Store, monitoring actif

Chaque phase est bloquante pour la suivante. Impossible de polir une app qui ne compile pas.

## Risks and Mitigations

### Risques Techniques Immédiats
- **Risque** : Régression lors refactoring architecture
- **Mitigation** : Tests exhaustifs à chaque étape, commits atomiques

### Dette Technique Accumulée
- **Risque** : Corrections partielles créant plus de problèmes
- **Mitigation** : Audit complet avant chaque merge, revue architecture

### Complexité Migration Serveur
- **Risque** : État incohérent pendant migration ActionCards
- **Mitigation** : Feature flags, migration progressive, rollback plan

### Respect TDD Strict
- **Risque** : Tentation contourner pour aller vite
- **Mitigation** : GitHub branch protection, CI/CD enforcement automatique

## Appendix

### Métriques Actuelles
- 1000+ tests existants (~70% passants)
- 11 tables PostgreSQL avec RLS
- 15+ fonctions serveur validées
- Support 8 joueurs simultanés testé

### Règles Développement
- TDD obligatoire (test-first)
- Clean Architecture stricte
- PR avec CI/CD vert uniquement
- Couverture minimum 80%
- Aucun test commenté/désactivé

### Commandes Essentielles
```bash
flutter test
flutter pub run build_runner build --delete-conflicting-outputs
flutter analyze
dart format .
```

Ce PRD se concentre sur la finalisation du MVP en corrigeant d'abord les problèmes critiques avant d'ajouter le polish nécessaire pour une release production.
# Task ID: 29
# Title: Mode hors-ligne avec sauvegarde locale SQLite
# Status: pending
# Dependencies: 27
# Priority: low
# Description: Permettre jeu complet sans connexion avec sauvegarde locale et synchronisation différée
# Details:
Installer sqflite: ^2.4.1, créer DatabaseService avec tables: offline_games, game_moves, player_stats. Implémenter OfflineGameRepository pour CRUD operations, sync queue pour actions différées. Modifier GameService pour détecter connectivité avec connectivity_plus: ^6.1.0, basculer automatiquement mode offline/online. Code: class OfflineGameRepository avec saveGame(Game game), loadGames(), createSyncQueue() pour replay vers Supabase quand connexion revenue

# Test Strategy:
Tester jeu complet sans connexion, vérifier sauvegarde locale fonctionnelle, valider sync différée reconnexion, confirmer cohérence données local/distant

# Subtasks:
## 1. Configuration SQLite et structure de base de données [pending]
### Dependencies: None
### Description: Installer et configurer SQLite avec création du schéma de base de données pour le mode hors-ligne
### Details:
Ajouter sqflite: ^2.4.1 dans pubspec.yaml. Créer DatabaseService dans /lib/core/services/database_service.dart avec méthode initDatabase() qui crée les tables: offline_games (id, game_data, created_at, last_modified, sync_status), game_moves (id, game_id, move_data, timestamp, sync_status), player_stats (id, player_name, games_played, total_score, best_score). Implémenter singleton pattern pour garantir une seule instance de la base de données. Ajouter migrations pour évolutions futures du schéma.

## 2. Implémentation OfflineGameRepository avec opérations CRUD [pending]
### Dependencies: 29.1
### Description: Créer le repository pour gérer toutes les opérations de données en mode hors-ligne
### Details:
Créer OfflineGameRepository dans /lib/features/game/data/repositories/offline_game_repository.dart. Implémenter méthodes: saveGame(Game game) pour sérialiser et stocker une partie, loadGames() pour récupérer toutes les parties sauvegardées, updateGame(String gameId, Game game), deleteGame(String gameId), getGameById(String gameId). Utiliser json_serializable pour la sérialisation des entités Game. Ajouter gestion des transactions pour cohérence des données. Implémenter cache mémoire pour optimiser les lectures fréquentes.

## 3. Système de queue de synchronisation pour actions différées [pending]
### Dependencies: 29.1
### Description: Créer un système de file d'attente pour stocker et rejouer les actions en attente de synchronisation
### Details:
Créer SyncQueueService dans /lib/core/services/sync_queue_service.dart. Implémenter table sync_queue (id, action_type, payload, retry_count, created_at, status). Créer méthodes: addToQueue(SyncAction action) pour ajouter une action, processQueue() pour traiter la file, retryFailedActions() avec backoff exponentiel. Gérer les types d'actions: CREATE_GAME, UPDATE_GAME, SUBMIT_MOVE, UPDATE_STATS. Implémenter mécanisme de priorité pour ordonner les actions. Ajouter limite de retry (max 3) et archivage des échecs permanents.

## 4. Service de détection de connectivité et bascule automatique [pending]
### Dependencies: 29.2, 29.3
### Description: Implémenter la détection de connexion réseau et la bascule transparente entre modes online/offline
### Details:
Ajouter connectivity_plus: ^6.1.0 dans pubspec.yaml. Créer ConnectivityService dans /lib/core/services/connectivity_service.dart avec Stream<ConnectivityResult> pour monitoring temps réel. Modifier GameService pour intégrer ConnectivityService: détecter état initial, écouter changements, basculer automatiquement entre OfflineGameRepository et GameRepository Supabase. Implémenter pattern Strategy pour abstraction du repository utilisé. Ajouter indicateur visuel (SnackBar ou Badge) pour informer l'utilisateur du mode actuel. Gérer cas edge: connexion intermittente, timeout réseau.

## 5. Synchronisation bidirectionnelle et résolution de conflits [pending]
### Dependencies: 29.3, 29.4
### Description: Implémenter la synchronisation complète des données locales vers Supabase à la reconnexion
### Details:
Créer SyncService dans /lib/core/services/sync_service.dart. Implémenter syncOfflineData() qui: 1) Vérifie connexion active, 2) Récupère toutes les actions de la sync_queue, 3) Les exécute dans l'ordre avec gestion d'erreurs, 4) Met à jour sync_status dans les tables locales, 5) Nettoie la queue des actions réussies. Gérer conflits potentiels: partie modifiée des deux côtés, utiliser timestamp pour résolution (last-write-wins). Implémenter pull des changements serveur manqués pendant offline. Ajouter progress indicator pendant sync. Notifier utilisateur du résultat (succès/échecs partiels).


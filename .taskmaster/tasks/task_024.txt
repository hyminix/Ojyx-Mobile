# Task ID: 24
# Title: SettingsService pour gestion préférences avec SharedPreferences
# Status: pending
# Dependencies: 23
# Priority: medium
# Description: Service backend pour persister et gérer toutes les préférences utilisateur
# Details:
Créer SettingsService avec méthodes get/set pour chaque préférence: soundVolume (0.0-1.0), musicVolume (0.0-1.0), vibrationsEnabled (bool), themeMode (ThemeMode enum), language (Locale). Utiliser shared_preferences: ^2.3.2, implémenter avec Riverpod provider, cache en mémoire pour performances. Code: class SettingsService avec _prefs = SharedPreferences.getInstance(), méthodes async setSoundVolume(double volume) await _prefs.setDouble('sound_volume', volume)

# Test Strategy:
Vérifier persistance entre redémarrages app, tester valeurs par défaut, valider types de données, confirmer cache mémoire fonctionnel

# Subtasks:
## 1. Créer la structure de base du SettingsService avec SharedPreferences [pending]
### Dependencies: None
### Description: Initialiser le service singleton avec injection de dépendances Riverpod et gestion de l'instance SharedPreferences
### Details:
Créer la classe SettingsService avec pattern singleton, initialiser SharedPreferences de manière asynchrone dans un provider Riverpod. Implémenter la logique de base avec gestion des erreurs d'initialisation. Structure: class SettingsService { late SharedPreferences _prefs; final _cache = <String, dynamic>{}; Future<void> init() async { _prefs = await SharedPreferences.getInstance(); } }. Créer le provider: @riverpod Future<SettingsService> settingsService(SettingsServiceRef ref) async

## 2. Implémenter les méthodes de gestion des volumes audio [pending]
### Dependencies: 24.1
### Description: Créer les getters/setters pour soundVolume et musicVolume avec validation des valeurs et cache mémoire
### Details:
Implémenter getSoundVolume(), setSoundVolume(double volume), getMusicVolume(), setMusicVolume(double volume). Validation des valeurs entre 0.0 et 1.0, valeurs par défaut à 0.5. Cache en mémoire pour éviter lectures répétées. Code: Future<void> setSoundVolume(double volume) async { final clampedVolume = volume.clamp(0.0, 1.0); await _prefs.setDouble('sound_volume', clampedVolume); _cache['sound_volume'] = clampedVolume; }

## 3. Ajouter la gestion des vibrations et du thème [pending]
### Dependencies: 24.1
### Description: Implémenter les méthodes pour vibrationsEnabled (bool) et themeMode (ThemeMode enum) avec sérialisation appropriée
### Details:
Créer getVibrationsEnabled(), setVibrationsEnabled(bool enabled), getThemeMode(), setThemeMode(ThemeMode mode). Sérialiser ThemeMode en string pour SharedPreferences. Valeurs par défaut: vibrations=true, theme=ThemeMode.system. Code: Future<void> setThemeMode(ThemeMode mode) async { await _prefs.setString('theme_mode', mode.name); _cache['theme_mode'] = mode; }. Parser le string lors de la lecture

## 4. Intégrer la gestion de la langue avec Locale [pending]
### Dependencies: 24.1
### Description: Implémenter les méthodes pour gérer la langue de l'application avec support des Locale Flutter
### Details:
Créer getLanguage(), setLanguage(Locale locale). Sérialiser Locale en format 'languageCode_countryCode' ou juste 'languageCode'. Valeur par défaut: Locale système ou 'fr'. Code: Future<void> setLanguage(Locale locale) async { final localeString = locale.countryCode != null ? '${locale.languageCode}_${locale.countryCode}' : locale.languageCode; await _prefs.setString('language', localeString); _cache['language'] = locale; }

## 5. Optimiser les performances avec cache complet et notifications [pending]
### Dependencies: 24.2, 24.3, 24.4
### Description: Implémenter un système de cache complet avec préchargement et notifications de changements via streams
### Details:
Ajouter méthode loadAllSettings() pour précharger toutes les préférences au démarrage. Implémenter StreamController pour notifier les changements. Créer méthode resetToDefaults() pour réinitialiser. Code: final _settingsController = StreamController<SettingsEvent>.broadcast(); Stream<SettingsEvent> get settingsStream => _settingsController.stream; Future<void> loadAllSettings() async { _cache['sound_volume'] = _prefs.getDouble('sound_volume') ?? 0.5; // etc pour tous }


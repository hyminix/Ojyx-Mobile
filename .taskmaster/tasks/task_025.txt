# Task ID: 25
# Title: Intégration sons et vibrations avec contrôles utilisateur
# Status: pending
# Dependencies: 24
# Priority: medium
# Description: Implémenter système audio et haptique respectant les préférences utilisateur
# Details:
Installer audioplayers: ^6.1.0 et vibration: ^2.0.0, créer AudioService et HapticService avec contrôle volume depuis settings. Implémenter sons: card flip, card place, game win/lose, button tap. Vibrations: card selection, error feedback, success actions. Code: AudioPlayer avec setVolume(settingsService.soundVolume), HapticFeedback.lightImpact() seulement si vibrationsEnabled. Preload sounds pour performances.

# Test Strategy:
Tester respect volume settings, vérifier activation/désactivation vibrations, valider preload sounds, confirmer feedback haptique approprié

# Subtasks:
## 1. Installation et configuration des dépendances audio/vibration [pending]
### Dependencies: None
### Description: Ajouter audioplayers et vibration au projet, configurer les permissions Android/iOS
### Details:
Ajouter dans pubspec.yaml: audioplayers: ^6.1.0 et vibration: ^2.0.0. Pour Android, ajouter permission VIBRATE dans AndroidManifest.xml. Pour iOS, ajouter les configurations audio dans Info.plist pour permettre la lecture en arrière-plan si nécessaire. Exécuter flutter pub get et vérifier que les packages sont correctement installés.

## 2. Création AudioService avec gestion volume et preload [pending]
### Dependencies: 25.1
### Description: Implémenter service singleton pour gérer tous les sons du jeu avec contrôle volume
### Details:
Créer lib/features/audio/data/services/audio_service.dart avec pattern Singleton. Utiliser AudioPlayer pour chaque son (card_flip.mp3, card_place.mp3, game_win.mp3, game_lose.mp3, button_tap.mp3). Implémenter preloadSounds() pour charger tous les sons au démarrage. Méthode playSound(SoundType type) qui respecte settingsService.soundVolume (0.0 à 1.0). Gérer le cache des AudioPlayer pour éviter recreations. Utiliser AudioCache pour assets audio.

## 3. Création HapticService avec contrôles utilisateur [pending]
### Dependencies: 25.1
### Description: Implémenter service pour vibrations avec respect des préférences utilisateur
### Details:
Créer lib/features/haptic/data/services/haptic_service.dart avec dépendance sur SettingsService. Implémenter méthodes: lightImpact() pour sélection carte, mediumImpact() pour placement carte, heavyImpact() pour erreurs, notificationSuccess() pour actions réussies. Chaque méthode vérifie d'abord if (settingsService.vibrationsEnabled) avant d'appeler HapticFeedback. Gérer gracieusement les appareils sans support vibration.

## 4. Intégration audio/haptique dans les widgets de jeu [pending]
### Dependencies: 25.2, 25.3
### Description: Connecter les services audio/haptique aux interactions utilisateur dans l'UI
### Details:
Dans GameCardWidget: ajouter audioService.playSound(SoundType.cardFlip) sur révélation et hapticService.lightImpact() sur sélection. Dans GameBoardWidget: audioService.playSound(SoundType.cardPlace) et hapticService.mediumImpact() sur placement valide. Dans GameEndDialog: audioService.playSound(SoundType.gameWin/gameLose) selon résultat. Pour tous les boutons UI: audioService.playSound(SoundType.buttonTap). Gérer les erreurs avec hapticService.heavyImpact().

## 5. Ajout contrôles volume/vibration dans SettingsScreen [pending]
### Dependencies: 25.2, 25.3
### Description: Créer l'interface utilisateur pour contrôler volume sons et activation vibrations
### Details:
Dans SettingsScreen, ajouter Slider pour volume (0-100%) lié à settingsService.soundVolume. Ajouter SwitchListTile pour vibrationsEnabled. Persister les valeurs avec SharedPreferences dans SettingsService. Ajouter bouton test pour preview volume actuel. Rafraîchir AudioService.setVolume() en temps réel lors du changement. Utiliser des icônes appropriées (volume_up, vibration) avec états visuels selon activation.


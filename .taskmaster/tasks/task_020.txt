# Task ID: 20
# Title: Device Info et Context enrichi pour monitoring
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Collecter informations device et contexte app pour enrichir les logs et erreurs Sentry
# Details:
Installer device_info_plus: ^10.1.2 et package_info_plus: ^8.0.2, créer DeviceInfoService pour collecter platform, version OS, model device, app version, build number. Intégrer dans LogEntry et Sentry contexts. Créer UserContext avec userId anonyme généré, sessionId unique par session. Code: await DeviceInfoPlugin().androidInfo pour Android, await PackageInfo.fromPlatform() pour app info. Sentry.configureScope((scope) => scope.setContext('device', deviceInfo))

# Test Strategy:
Vérifier collecte infos device sur Android/iOS, valider anonymisation userId, confirmer envoi contexts vers Sentry, tester persistance sessionId

# Subtasks:
## 1. Installation des packages device_info_plus et package_info_plus [pending]
### Dependencies: None
### Description: Ajouter les dépendances nécessaires pour collecter les informations du device et de l'application
### Details:
Ajouter dans pubspec.yaml: device_info_plus: ^10.1.2 et package_info_plus: ^8.0.2. Exécuter flutter pub get pour installer les packages. Vérifier l'importation correcte dans les fichiers nécessaires.

## 2. Création du DeviceInfoService [pending]
### Dependencies: 20.1
### Description: Implémenter un service centralisé pour collecter toutes les informations du device et de l'application
### Details:
Créer lib/core/services/device_info_service.dart avec classe DeviceInfoService. Implémenter méthodes getDeviceInfo() retournant Map<String, dynamic> avec platform, OS version, device model via DeviceInfoPlugin().androidInfo/iosInfo. Méthode getAppInfo() avec PackageInfo.fromPlatform() pour version, buildNumber. Utiliser pattern Singleton ou provider Riverpod.

## 3. Implémentation du UserContext avec génération d'identifiants anonymes [pending]
### Dependencies: 20.2
### Description: Créer système de génération et persistance d'identifiants utilisateur anonymes et sessions uniques
### Details:
Créer UserContextService avec génération userId anonyme via Uuid().v4(), persisté dans SharedPreferences. SessionId unique généré à chaque lancement app. Méthodes getUserContext() retournant userId, sessionId, sessionStartTime. Intégration avec DeviceInfoService pour contexte complet.

## 4. Intégration des contextes dans LogEntry et LogService [pending]
### Dependencies: 20.2, 20.3
### Description: Enrichir les logs locaux avec les informations device et user collectées
### Details:
Modifier LogEntry pour inclure deviceInfo et userContext optionnels. Dans LogService.log(), appeler automatiquement DeviceInfoService et UserContextService pour enrichir chaque entrée. Adapter formatage des logs pour inclure ces infos de manière lisible. Gérer cache pour éviter appels répétés.

## 5. Configuration des contextes Sentry avec scope enrichi [pending]
### Dependencies: 20.2, 20.3, 20.4
### Description: Intégrer les informations device et user dans les contextes Sentry pour enrichir les rapports d'erreurs
### Details:
Dans SentryConfig, après init Sentry, utiliser Sentry.configureScope() pour définir contexts. scope.setContext('device', deviceInfo) avec toutes infos device, scope.setContext('app', appInfo) pour version/build, scope.setUser(SentryUser(id: userId)) pour user anonyme. Mettre à jour contexts au changement de session.


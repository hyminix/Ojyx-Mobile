# Task ID: 19
# Title: Console debug overlay in-app avec geste secret
# Status: pending
# Dependencies: 17
# Priority: high
# Description: Créer une console de debug superposée accessible via 5 taps rapides coin supérieur droit
# Details:
Implémenter DebugConsoleOverlay avec Overlay widget, détecter geste secret avec GestureDetector multi-tap, afficher logs en temps réel avec ListView.builder, filtrage par niveau/catégorie, search functionality, export logs vers clipboard. Utiliser StreamBuilder pour logs temps réel. Design: Container semi-transparent avec backdrop blur, boutons Clear/Export/Filter. Code: Overlay.of(context).insert(OverlayEntry(builder: (context) => DebugConsoleOverlay()))

# Test Strategy:
Tester activation par geste secret, vérifier affichage logs temps réel, valider filtres et recherche, confirmer export vers clipboard

# Subtasks:
## 1. Créer le widget DebugConsoleOverlay avec UI semi-transparente [pending]
### Dependencies: None
### Description: Implémenter le widget principal de la console avec Container semi-transparent et backdrop blur
### Details:
Créer DebugConsoleOverlay comme StatefulWidget avec Container semi-transparent (Colors.black87), ClipRect avec BackdropFilter pour effet blur (sigmaX: 5, sigmaY: 5). Structure: AppBar avec titre 'Debug Console' et boutons actions (Clear, Export, Filter), body avec ListView.builder pour afficher les logs. Utiliser SafeArea et Material pour éviter conflits avec système. Prévoir AnimatedContainer pour transitions smooth lors de l'ouverture/fermeture.

## 2. Implémenter la détection du geste secret 5 taps [pending]
### Dependencies: None
### Description: Créer un detector de geste multi-tap dans le coin supérieur droit de l'écran
### Details:
Ajouter GestureDetector global avec Stack au niveau racine de l'app. Positionner Container invisible 100x100 pixels en haut à droite avec Positioned(top: 0, right: 0). Utiliser onTap avec counter et Timer pour détecter 5 taps en moins de 2 secondes. Code: int _tapCount = 0; Timer? _tapTimer; onTap: () { _tapCount++; _tapTimer?.cancel(); if (_tapCount >= 5) { _showDebugConsole(); _tapCount = 0; } else { _tapTimer = Timer(Duration(seconds: 2), () => _tapCount = 0); }}

## 3. Intégrer le système de logs avec StreamController [pending]
### Dependencies: 19.1
### Description: Créer le service de logging avec Stream pour affichage temps réel des logs
### Details:
Créer DebugLoggerService singleton avec StreamController<LogEntry>.broadcast(). LogEntry: class LogEntry { final String message; final LogLevel level; final DateTime timestamp; final String? category; }. Méthodes: log(String message, {LogLevel level, String? category}), clearLogs(), getFilteredLogs(). Utiliser StreamBuilder dans DebugConsoleOverlay pour écouter _logStream. Implémenter buffer circulaire de 1000 entrées max pour éviter saturation mémoire.

## 4. Ajouter filtrage par niveau et recherche de logs [pending]
### Dependencies: 19.1, 19.3
### Description: Implémenter les fonctionnalités de filtrage et recherche dans la console
### Details:
Ajouter DropdownButton pour filtrer par LogLevel (All, Error, Warning, Info, Debug). TextField avec InputDecoration pour recherche avec debounce 300ms. Utiliser where() sur la liste des logs pour filtrer. État local: LogLevel? _selectedLevel; String _searchQuery = ''; Méthode de filtrage: logs.where((log) => (_selectedLevel == null || log.level == _selectedLevel) && log.message.toLowerCase().contains(_searchQuery.toLowerCase())). Ajouter chips pour catégories avec FilterChip.

## 5. Implémenter l'export des logs vers clipboard [pending]
### Dependencies: 19.3, 19.4
### Description: Ajouter la fonctionnalité d'export des logs filtrés vers le presse-papier
### Details:
Utiliser package clipboard: ^0.1.3 ou services.dart Clipboard. Bouton Export dans AppBar avec IconButton(icon: Icon(Icons.copy)). Formater les logs: String formatLogs(List<LogEntry> logs) => logs.map((log) => '[${DateFormat('HH:mm:ss').format(log.timestamp)}] [${log.level.name}] ${log.category != null ? '[${log.category}] ' : ''}${log.message}').join('\n'). Afficher SnackBar de confirmation après copie. Limiter export à 10000 caractères pour éviter problèmes clipboard.


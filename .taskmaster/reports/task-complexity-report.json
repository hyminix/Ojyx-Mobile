{
	"meta": {
		"generatedAt": "2025-07-27T20:00:29.278Z",
		"tasksAnalyzed": 3,
		"totalTasks": 34,
		"analysisCount": 3,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": true
	},
	"complexityAnalysis": [
		{
			"taskId": 32,
			"taskTitle": "Corriger le système de lancement de partie multijoueur",
			"complexityScore": 9,
			"recommendedSubtasks": 8,
			"expansionPrompt": "Décomposer l'implémentation du système de lancement multijoueur en étapes : création du schéma de base de données, implémentation de la logique de création de game state, gestion de la synchronisation Realtime, adaptation du GameScreen, gestion des états de transition et des erreurs, tests d'intégration avec rollback, et documentation de l'API",
			"reasoning": "Tâche très complexe nécessitant création de plusieurs tables Supabase interdépendantes, logique transactionnelle avec rollback, synchronisation Realtime bidirectionnelle, gestion d'états complexes et cas d'erreur. L'architecture doit être robuste pour supporter la charge multijoueur avec transitions d'état atomiques."
		},
		{
			"taskId": 33,
			"taskTitle": "Système de nettoyage automatique des parties inactives",
			"complexityScore": 8,
			"recommendedSubtasks": 7,
			"expansionPrompt": "Structurer l'implémentation du système de nettoyage en : création de l'Edge Function Supabase, mise en place du système de heartbeat côté client, création des triggers PostgreSQL pour détection de déconnexion, configuration du CRON job avec pg_cron, gestion des cas limites et edge cases, système de monitoring et logs, tests de charge et performance",
			"reasoning": "Nécessite expertise en Edge Functions Supabase, triggers PostgreSQL, et CRON jobs. La complexité réside dans la coordination entre client (heartbeat) et serveur (nettoyage), avec gestion robuste des déconnexions et edge cases. Le système doit être performant pour ne pas impacter les parties actives."
		},
		{
			"taskId": 34,
			"taskTitle": "Provider Riverpod avec subscription Realtime pour liste des parties",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Diviser l'implémentation en : création du AvailableRoomsNotifier avec gestion du cycle de vie, mise en place de la subscription Realtime avec filtres appropriés, optimisation des re-renders avec comparaison d'objets, intégration dans JoinGameScreen avec indicateur live, ajout du mécanisme de debounce pour performance",
			"reasoning": "Complexité modérée nécessitant bonne compréhension de Riverpod AsyncNotifier et Supabase Realtime. Les défis principaux sont la gestion propre du cycle de vie des subscriptions, l'optimisation des performances pour éviter les re-renders excessifs, et la gestion de la reconnexion automatique."
		}
	]
}